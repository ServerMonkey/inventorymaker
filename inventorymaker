#!/usr/bin/env python3
# coding=utf-8

# PARSER LIBRARIES ############################################################

import os
import sys
import subprocess
import csv
import random
from faker import Faker
import hashlib

# PARAMETERS ##################################################################

# args
gen_template = False
if str(sys.argv[1]) == '-h' or str(sys.argv[1]) == '--help':
    subprocess.run(["man", "inventorymaker.1"])
    exit(0)
elif str(sys.argv[1]) == 'template':
    gen_template = True
else:
    dir_src = ''
    try:
        dir_src = str(sys.argv[1])
    except IndexError:
        print('You need to specify an input directory')
        exit(1)
    if not os.path.isdir(dir_src):
        print("You need to specify an existing input directory, " +
              "can't be a relative path")
        exit(1)

file_dest = ''
try:
    file_dest = str(sys.argv[2])
except IndexError:
    print('You need to specify an output file')
    exit(1)
if gen_template:
    if not file_dest.endswith('.csv'):
        print("You need to specify an output file that ends in '.csv'")
        exit(1)
else:
    if not file_dest.endswith('.ini'):
        print("You need to specify an output file that ends in '.ini'")
        exit(1)

parameters = ''
try:
    parameters = str(sys.argv[3])
except IndexError:
    pass
if 'r' in parameters:
    # delete old inventory file
    try:
        os.remove(file_dest)
    except FileNotFoundError:
        pass

if 'd' in parameters:
    para_debug = True
else:
    para_debug = False

exit_early = False

# STATIC VARIABLES ############################################################

path_home = os.path.expanduser("~")
path_im = path_home + '/.inventorymaker'
file_hash_cache = path_im + '/md5.cache'
file_dest_json = file_dest.replace('.ini', '.json')
dict_pass_cache = {}

list_system_states = [
    'UP',
    'DOWN',
    'MAN',
    'MAINT',
    'EXC',
    'LIQ',
    'UNKNOWN'
]

list_system_states_skip = [
    'EXC',
    'DOWN'
]

text_system_states = 'Can be: '
for system_state in list_system_states:
    text_system_states = text_system_states + system_state + ' '

dict_header_categories = {
    'BECOME': 'ansible_become',
    'BECOME_METHOD': 'ansible_become_method',
    'BECOME_PASSWORD': 'ansible_become_password',
    'CHILD': 'tag_child',
    'DESCRIPTION': 'im_description',
    'DNS': 'im_dns',
    'FACTORY_HOST': 'im_factory_host',
    'FACTORY_PASSWORD': 'im_factory_password',
    'FACTORY_USER': 'im_factory_user',
    'HARDWARE': 'im_hardware',
    'HOST': 'ansible_host',
    'HOSTNAME': 'ansible_hostname',
    'HPILO_HOST': 'im_hpilo_host',
    'HPILO_PASSWORD': 'im_hpilo_password',
    'HPILO_USER': 'im_hpilo_user',
    'IPMI_HOST': 'im_ipmi_host',
    'IPMI_PASSWORD': 'im_ipmi_password',
    'IPMI_USER': 'im_ipmi_user',
    'LOCATION': 'im_location',
    'MAC': 'im_mac',
    'ORDER': 'im_order',
    'OS': 'im_os',
    'PASSWORD': 'ansible_password',
    'PORT': 'ansible_port',
    'PYTHON_INTERPRETER': 'ansible_python_interpreter',
    'STATE': 'im_state',
    'USER': 'ansible_user',
}

dict_header_categories_help = {
    'BECOME': 'Can the Superuser become root?- eiter \'true\' or \'false\'',
    'BECOME_METHOD': 'How Superuser becomes root- eiter \'su\' or \'sudo\'',
    'BECOME_PASSWORD': 'Password for BECOME_METHOD',
    'CHILD': 'Groupname- can be a hostname or inventory file (remove .csv)',
    'DESCRIPTION': 'Explain the purpouse of this machine- in one sentence',
    'DNS': 'Override default DNS server',
    'FACTORY_HOST': 'Original HOSTNAME that should be changed',
    'FACTORY_PASSWORD': 'Original PASSWORD that should be changed',
    'FACTORY_USER': 'Original USER that should be changed',
    'HARDWARE': 'Additional hardware information',
    'HOST': 'Host source- preferable IP but can be another HOSTNAME',
    'HOSTNAME': 'Machines hostname- Domain name- DNS-name or FQDN',
    'HPILO_HOST': 'HP-iLO HOSTNAME',
    'HPILO_PASSWORD': 'HP-iLO password',
    'HPILO_USER': 'HP-iLO user account login name',
    'IPMI_HOST': 'IMPI HOSTNAME',
    'IPMI_PASSWORD': 'IPMI password',
    'IPMI_USER': 'IPMI user account login name',
    'LOCATION': 'Physical location like \'Office\' \'RACK03\' \'49.7:-88.6\'',
    'MAC': 'MAC adress- example: ea:57:b7:16:a1:75',
    'ORDER': 'vmh deployment order, this marks the host as a VM',
    'OS': 'Name of the virtual image source file or name of the OS',
    'PASSWORD': 'Superuser password- Be mindful of BECOME_METHOD',
    'PORT': 'SSH port number',
    'PYTHON_INTERPRETER': 'What Python version Ansible should use',
    'STATE': text_system_states,
    'USER': 'Superuser account login name',
}

legacy = [
    'FACTORY_AUTH',
    'AUTH',
    'IP',
    'FACTORY_IP'
]

# LOAD CFG ####################################################################

file_cfg_vmh = '/etc/vmh.conf'
path_vmh_env = ''
if os.path.isfile(file_cfg_vmh):
    with open(file_cfg_vmh, "r") as cfg:
        for line in cfg:
            # get path to vmh immutable folder
            if line.startswith('PATH_ENVIRONMENTS='):
                path_vmh_env = line.rsplit('=')[1].rstrip('\n')

    if path_vmh_env != '' and not os.path.isdir(path_vmh_env):
        print("Failed to load PATH_ENVIRONMENTS from " + file_cfg_vmh)
        exit(1)
else:
    print('Skipping vmh, not installed')


# FUNCTIONS ###################################################################

def debug(text):
    if para_debug:
        print("DEBUG: " + str(text))


def exit_fail(text):
    if text:
        print("Error: " + str(text))

    # delete old inventory file
    try:
        os.remove(file_dest)
    except FileNotFoundError:
        pass

    exit(1)


def create_template_file():
    header_data = ''
    sample_data = ''
    for header_key in dict_header_categories:
        header_data = header_data + header_key + ','
        sample_data = sample_data + "# " + \
                      dict_header_categories_help.get(header_key) + ','

    try:
        with open(file_dest, 'w') as f:
            f.write(header_data.rstrip(',') + '\n' +
                    '# this line is reserved for group variables' + '\n' +
                    sample_data.rstrip(',') + '\n')
    except Exception as try_error:
        print("ERROR: " + str(try_error))


def hash_make(file):
    hash_md5 = hashlib.md5()
    with open(file, "rb") as file_in:
        for chunk in iter(lambda: file_in.read(4096), b""):
            hash_md5.update(chunk)

    return hash_md5.hexdigest()


def hash_verify(file):
    hash_md5 = hashlib.md5()
    with open(file, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def check_for_new_inventory():
    # read in old md5 cache
    with open(file_hash_cache, "r") as file_in:
        full_hash_old = file_in.read()

    # iterate over files in that directory
    files_group = os.listdir(dir_src)
    full_hash = ''
    for filename in files_group:
        f = os.path.join(dir_src, filename)
        # checking if it is a file
        if os.path.isfile(f) and f.endswith('.csv'):
            full_hash = full_hash + hash_make(f)

    # exit if caches are the same
    if full_hash_old == full_hash:
        exit(0)

    # create new cache
    with open(file_hash_cache, "w") as file_out:
        file_out.write(full_hash)


def iterate_over_input_dir():
    # give correct permissions
    os.umask(0)
    with open(os.open(file_dest, os.O_CREAT | os.O_WRONLY, 0o600),
              'w') as file_inventory:
        # add localhost
        file_inventory.write('[local]\n')
        file_inventory.write('localhost ansible_connection=local\n')
        file_inventory.write('\n')

    # iterate over files in that directory
    files_group = os.listdir(dir_src)
    files_group.sort()
    for filename in files_group:
        f = os.path.join(dir_src, filename)
        # checking if it is a file
        if os.path.isfile(f) and f.endswith('.csv'):
            convert_csv_to_ini(f)

    # close file
    file_inventory.close()


def csv_to_list(path_csv):
    list_rows = []
    header = ''
    group_data = ''

    # read CSV
    with open(path_csv, newline='') as csvfile:
        csv_invent = csv.reader(csvfile, delimiter=',', quotechar='|')
        counter = 0
        for csv_row in csv_invent:
            counter = counter + 1
            data_entire_row = ''.join(csv_row)

            # first line must be header
            if counter == 1:
                header = csv_row
            # second line must be group data
            elif counter == 2:
                group_data = csv_row
            # add to data and skip empty rows
            elif data_entire_row != '':
                # ignore rows that are only made of comments
                list_cells = data_entire_row.split(",")
                row_is_a_comment = True
                for cell in list_cells:
                    if not cell.startswith('#'):
                        row_is_a_comment = False
                if row_is_a_comment is False:
                    list_rows.append(csv_row)

    return header, group_data, list_rows


def random_hostname():
    file_dict = '/usr/share/dict/words'
    dictionary = open(file_dict).read().splitlines()

    rnd_hostname = ''
    # put together two random words
    for i in range(2):
        random_word = random.choice(dictionary)
        random_word = random_word.lower()
        filter_special = filter(str.isalpha, random_word)
        random_word = ''.join(filter_special)
        rnd_hostname = rnd_hostname + random_word

    # return a maximum of 16 characters
    return rnd_hostname[:16]


def random_ip(ip_class=''):
    faker = Faker()
    # todo, add the argument "inline" and by so you can choose to generate a
    # random out or both, out and inline file
    # https://www.guru99.com/ip-address-classes.html
    # Class A	1.0.0.1 to 126.255.255.254 (255.0.0.0) (net,host,host,host)
    # Class B	128.1.0.1 to 191.255.255.254 (255.255.0.0) (net,net,host,host)
    # Class C	192.0.1.1 to 223.255.254.254 (255.255.255.0) (net,net,net,host)
    if ip_class == '':
        fake_ip = faker.ipv4()
    else:
        fake_ip = faker.ipv4(address_class=ip_class)
    return fake_ip


def random_mac(nic_type=''):
    args = ''
    if nic_type == 'q':
        args = '-q'
    elif nic_type == 'x':
        args = '-x'

    mac = os.popen('randmac ' + args).read()
    mac = mac.replace('\n', '')
    return mac


def error(code, cat, row_nr):
    print('FORMAT ERROR: column ' + cat + ': ' + code + ', on row: ')
    print('  ' + str(row_nr))

    # delete old inventory file
    try:
        os.remove(file_dest)
    except FileNotFoundError:
        pass

    exit(1)


#
# def sort_by_header(list_header, list_row):
#
#
#     list_out = [''] * len(list_header_categories)
#     # todo
#     # list_extras_header = []
#     # list_extras = []
#
#     # get data from each individual item/cell in current row
#     cnt_cells = 0
#     for cell in list_row:
#         try:
#             cat = list_header[cnt_cells].lower()
#         except IndexError as err:
#             cat = ''
#             print(
#                 'ERROR: ' + str(err) +
#                 ' - There is probably a comma in your CSV ' +
#                 'that is not a column seperator, remove it.')
#             exit_fail()
#
#         # assign data for each header category
#         cnt_header_cats = 0
#         for _ in list_header_categories:
#             if cat.upper() == list_header_categories[cnt_header_cats]:
#                 list_out[cnt_header_cats] = cell
#             cnt_header_cats = cnt_header_cats + 1
#
#         # todo
#         # # add non standart headers
#         # if cell != '' and cat.upper() not in list_header_categories:
#         #     list_extras_header.append(cat)
#         #     list_extras.append(cell)
#
#         # cell counter
#         cnt_cells = cnt_cells + 1
#
#     return list_out


def parse_im_script(row):
    # HOSTNAME
    if row[0].startswith('*'):
        row[0] = random_hostname()

    # IP
    if row[3].startswith('*'):
        if row[3] == '*':
            row[3] = random_ip()
        elif row[3] == '*A':
            row[3] = random_ip('a')
        elif row[3] == '*B':
            row[3] = random_ip('b')
        elif row[3] == '*C':
            row[3] = random_ip('c')
    elif row[3] != '':
        if '.' not in row[3]:
            error('Is not an IPv4 address', 'IP', row)

    # MAC
    if row[5].startswith('*'):
        if row[5] == '*':
            row[5] = random_mac()
        # qemu VM
        elif row[5] == '*Q':
            row[5] = random_mac('q')
        # xen VM
        elif row[5] == '*X':
            row[5] = random_mac('x')
        # auto detect VM
        if row[6] == '':
            row[6] = 'VM'
    elif row[5] != '':
        if ':' not in row[5]:
            error('Is not a MAC address', 'MAC', row)

    # STATE
    if row[8] not in list_system_states:
        error(
            'Only use ' + ', '.join(list_system_states) + 'or empty variable',
            'STATE', row)
        row[8] = 'UNKNOWN'

    # OS
    if row[9] == 'AUTO':
        row[9] = 'generic'

    # DESCRIPTION
    if row[10] == 'AUTO':
        row[9] = 'generic system'

    # AUTH
    if '$USER' in row[13]:
        host_user = os.getlogin()
        row[13] = row[13].replace('$USER', host_user)

    return row


def get_password(pass_path):
    # reuse existing password
    if pass_path in dict_pass_cache:
        current_pass = dict_pass_cache.get(pass_path)
    # get new password
    else:
        # get password from pass
        pass_home = os.path.expanduser('~') + '/.password-store/ansible/'
        pass_path_full = 'ansible/' + pass_path
        cmd = 'pass show ' + pass_path_full
        current_pass = ''

        if not os.path.isfile(pass_home + pass_path + '.gpg'):
            print('No password, add with:  pass insert ' + pass_path_full)
            global exit_early
            exit_early = True
            current_pass = ''
            return current_pass

        try:
            current_pass = str(
                subprocess.run(cmd, check=True, shell=True, text=True,
                               capture_output=True).stdout)
        except subprocess.CalledProcessError:
            print('Aborting, pass decryption failed')
            exit_fail('Command was: ' + cmd)
        except FileNotFoundError:
            exit_fail('ERROR: pass is not installed')

        current_pass = current_pass.replace("\n", "")

        # add password to dictionary
        dict_pass_cache.update({pass_path: current_pass})

    return current_pass


def parse_row(row, list_header, curr_group, is_group):
    debug(row)

    # create dest inventory database
    list_hostdata = []
    list_children = []
    list_vmh = []
    dict_data = {}

    # translate header to ansible variables
    count_cat = 0
    if not row:
        exit_fail('row is empty')

    for key in list_header:
        data = row[count_cat]
        if data and not data.startswith('#'):

            # translate key
            if key in dict_header_categories:
                debug("  DICT ADD: " + key + '(' + data + ')')
                dict_data.update({dict_header_categories[key]: data})
            # warn and ignore
            elif key in legacy:
                debug("  DICT SKIP LEGACY: " + key + '(' + data + ')')
            # use as is
            else:
                debug("  DICT ADD: " + key + '(' + data + ')')
                dict_data.update({key.lower(): data})

        count_cat = count_cat + 1

    # todo:
    # data = parse_im_script(data)

    # parse special tags
    for key in dict_data:
        key_data = dict_data.get(key)
        if '$USER' in key_data:
            host_user = os.getlogin()
            data_new = key_data.replace('$USER', host_user)
            dict_data.update({key.lower(): data_new})
            debug("  DICT REPLACE: " + key + '(' + key_data + ') --> '
                  + key + '(' + data_new + ')')

    if 'ansible_hostname' in dict_data:
        curr_hostname = dict_data.get('ansible_hostname')
    elif 'tag_child' in dict_data:
        curr_hostname = dict_data.get('tag_child')
    else:
        curr_hostname = curr_group
        if not is_group:
            exit_fail("Missing variable: 'ansible_user' or 'tag_child'")

    # parse script
    dict_data_tmp = dict_data.copy()
    for key in dict_data_tmp:
        key_data = dict_data_tmp.get(key)

        # check become method for become password
        if key == 'ansible_become_password' and key_data:
            if 'ansible_become_method' not in dict_data:
                exit_fail("Missing variable: 'ansible_become_method'")

        # exclude certain states
        if key == 'im_state' and key_data in list_system_states_skip:
            debug("  SKIP STATE: " + key)
            return False

        # exclude physical-only-login
        if key == 'ansible_password' and key_data == 'LOCAL':
            debug("  SKIP LOCAL: " + key)
            return False
        elif key == 'ansible_user' and key_data == 'LOCAL':
            debug("  SKIP LOCAL: " + key)
            return False

        # vmh
        if key == 'im_order' and 'im_os' in dict_data:
            list_vmh.append(dict_data.get('im_order') + ','
                            + curr_hostname + ','
                            + dict_data.get('im_os'))

        # find passwords
        if key_data == 'PASS':
            pass_suff = ''
            if is_group:
                pass_pre = curr_group + '/'
            else:
                pass_pre = curr_group + '/' + curr_hostname + '/'

            if key == 'ansible_password':
                if dict_data.get('ansible_user'):
                    pass_suff = dict_data.get('ansible_user')
                else:
                    exit_fail('ansible_user is required when using ' + key)
            elif key == 'ansible_become_password':
                pass_suff = dict_data.get('ansible_user')
            elif key == 'im_factory_password':
                if dict_data.get('im_factory_user'):
                    pass_suff = dict_data.get('im_factory_user')
                else:
                    exit_fail('im_factory_user is required when using ' + key)
            elif key == 'im_ipmi_password':
                if dict_data.get('im_impi_user'):
                    pass_suff = dict_data.get('im_impi_user')
                else:
                    exit_fail('im_impi_user is required when using ' + key)
            elif key == 'im_hpilo_password':
                if dict_data.get('im_hpilo_user'):
                    pass_suff = dict_data.get('im_hpilo_user')
                else:
                    exit_fail('im_hpilo_user is required when using ' + key)
            else:
                exit_fail('Pass tag not available for: ' + key)

            debug("  GET PASS: " + str(key) + " pass_pre:" + str(
                pass_pre) + " pass_suff:" + str(pass_suff))
            dict_data.update({key: get_password(pass_pre + pass_suff)})

        # specific path
        elif key_data.startswith('PASS:'):
            debug("  GET PASS (PATH): " + key)
            pass_path = key_data.replace('PASS:', '')
            dict_data.update({key: get_password(pass_path)})

    # auto add become password
    dict_data_tmp = dict_data.copy()
    for key in dict_data_tmp:
        key_data = dict_data_tmp.get(key)
        sudo_user_password = dict_data.get('ansible_password')

        if key == 'ansible_become_method' and key_data == 'sudo':
            dict_data.update({'ansible_become_password': sudo_user_password})

    # sort list
    dict_data = dict(sorted(dict_data.items()))

    # apply conversation rules
    # for each existing cell
    for key in dict_data:
        key_data = dict_data.get(key)

        # host as child group alias
        if key == 'ansible_hostname':
            debug("  SKIP ADD (HOSTNAME): " + key)
        elif key == 'tag_child':
            debug("  ADD (PARENT): " + key_data)
            list_children.append(key_data)
            # if there are other tags than CHILD tag
            # if ''.join(data) != data[1]:
            #     error('Add to group or ' + data[1] + '.csv instead',
            #           'everything but CHILD', row)

        # add
        else:
            if key.startswith('ansible_'):
                debug("  ADD (ANSIBLE): " + key)
                key_prefix = ''
            elif key.startswith('im_'):
                debug("  ADD (IM): " + key)
                key_prefix = ''
            else:
                debug("  ADD (UNKNOWN): " + key)
                key_prefix = 'im_'

            if is_group:
                debug("  ADD (PLAIN): " + key)
                list_hostdata.append(key_prefix + key + "=\""
                                     + key_data + "\"")
            if key_data is None:
                debug("  ADD (EMPTY): " + key)
                list_hostdata.append(curr_hostname + ' '
                                     + key_prefix + key + "=\""
                                     + "\"")
            else:
                list_hostdata.append(curr_hostname + ' '
                                     + key_prefix + key + "=\""
                                     + key_data + "\"")

    return list_hostdata, list_children, list_vmh


def convert_csv_to_ini(file_src):
    # source data
    csv_data = csv_to_list(file_src)
    list_header = csv_data[0]
    list_groups = csv_data[1]
    list_hosts = csv_data[2]

    list_hostdata = []
    list_vars = []
    list_children = []
    list_vmh = []

    # more variables
    # todo
    # str_bec_false = 'ansible_become=false'
    # str_bec_su = 'ansible_become_method=su'
    # str_bec_sudo = 'ansible_become_method=sudo'
    # str_python = 'ansible_python_interpreter=auto_silent'  # todo

    # group data
    # data_group = sort_by_header(list_header, list_groups)
    # data_group = parse_im_script(data_group)

    # get group
    curr_group = os.path.basename(file_src).replace('.csv', '')

    # iterate over each entire row/cell
    debug("### FILE: " + file_src)
    #
    row_counter = 2
    for row in list_hosts:
        row_counter = row_counter + 1
        debug('--- ROW ' + str(row_counter) + ' --- ' + row[0] + ' ------')
        list_row_result = parse_row(row, list_header, curr_group, False)
        if list_row_result:
            list_hostdata = list_hostdata + list_row_result[0]
            list_children = list_children + list_row_result[1]
            list_vmh = list_vmh + list_row_result[2]
        else:
            debug("SKIP: " + str(row[0]))
    # vars
    if list_groups:
        list_vars_result = parse_row(list_groups, list_header, curr_group,
                                     True)
        if list_vars_result:
            list_vars = list_vars + list_vars_result[0]

    if exit_early and not para_debug:
        exit_fail('Missing passwords')

    # write destination inventory file
    file_inventory = open(file_dest, 'a')

    # add ansible inventory
    # hosts
    # always add group, even when empty
    list_hostdata.insert(0, '[' + curr_group + ']')
    for m in list_hostdata:
        file_inventory.write(m + '\n')
    file_inventory.write('\n')
    # vars
    if ''.join(list_vars) != '':
        list_vars.insert(0, '[' + curr_group + ':vars]')
        for o in list_vars:
            file_inventory.write(o + '\n')
        file_inventory.write('\n')
    # children
    if ''.join(list_children) != '':
        list_children.insert(0, '[' + curr_group + ':children]')
        for p in list_children:
            file_inventory.write(p + '\n')
        file_inventory.write('\n')

    # close file
    file_inventory.close()

    if para_debug:
        debug("")
        debug("### RESULT:")
        os.system("cat " + file_dest)

    # # AUTH and USER
    # if data[13] or data[18]:
    #     # always add
    #     # list_dest.append(data[0] + ' ' + str_python)  #todo
    #     # use unprivileged user instead
    #     if data[18]:
    #         user_name = data[18]
    #     else:
    #         user_name = data[13]
    #     # add user
    #     list_dest.append(
    #         data[0] + ' ansible_user=' + os.path.basename(user_name))
    #     list_dest.append(gen_pass_tag(user_name,
    #                                   'ansible',
    #                                   curr_group,
    #                                   data[0]))
    #     # root does not need become
    #     if user_name == 'root':
    #         pass
    #     # force disable become for USER if AUTH is "FALSE"
    #     elif data[13] == 'FALSE':
    #         list_dest.append(data[0] + ' ' + str_bec_false)
    #     # unprivileged user, uses su and root password
    #     elif data[18]:
    #         list_dest.append(data[0] + ' ' + str_bec_su)
    #         list_dest.append(gen_pass_tag(data_group[13],
    #                                       'ansible_become',
    #                                       curr_group,
    #                                       data[0]))
    #     # user with sudo
    #     elif data[13]:
    #         list_dest.append(data[0] + ' ' + str_bec_sudo)
    #         # become pass is required even if it is the same as user
    #         list_dest.append(gen_pass_tag(user_name,
    #                                       'ansible_become',
    #                                       curr_group,
    #                                       data[0]))

    # write vmh environment file
    # if list_vmh is not empty
    if bool(list_vmh) and path_vmh_env:
        print("Generating vmh environment '" + curr_group + "' ...")
        # sort by first number in natural order
        list_vmh.sort(key=lambda x: '{0:0>8}'.format(x.rsplit(',')[0]).lower())
        # add each line
        path_file_vmh = path_vmh_env + '/' + curr_group + '.csv'
        debug('path_file_vmh: ' + path_file_vmh)
        # give correct permissions
        os.umask(0)
        with open(os.open(path_file_vmh, os.O_CREAT | os.O_WRONLY, 0o600),
                  'w') as file_vmh:
            # add localhost
            for q in list_vmh:
                file_vmh.write(q + '\n')
        # close file
        file_vmh.close()


def main():
    if gen_template:
        print("Create template")
        create_template_file()
    else:

        # create config path
        if not os.path.isdir(path_im):
            os.makedirs(path_im)

        # cleanup hash if there is no destination inventory
        if not os.path.isfile(file_dest) or not os.path.isfile(
                file_hash_cache):
            try:
                with open(file_hash_cache, 'w') as f:
                    f.write('')
            except FileNotFoundError:
                pass

        check_for_new_inventory()

        # delete old inventory file
        try:
            os.remove(file_dest)
        except FileNotFoundError:
            pass

        # delete old vmh environments
        if path_vmh_env:
            files_vmh_env = os.listdir(path_vmh_env)
            for file in files_vmh_env:
                if file.endswith(".csv"):
                    os.remove(os.path.join(path_vmh_env, file))

        # generate new inventory
        if 'r' in parameters:
            print("Generating inventory (force)...")
        else:
            print("Generating inventory...")
        iterate_over_input_dir()


# MAIN ########################################################################

main()

# todo:
# check if password file has changed.
# if not simply reuse old password from inventory file
# or create a password dictionary taht is encrypted:
# https://stackoverflow.com/questions/182197/how-do-i-watch-a-file-for-changes
#
# also get passwords in paralell
#
# flags:
# -l --live only updates MAINT variable to file_inventory
# -u --update only updates RND fields that have no value
# -f --fullupdate replaces every RND field with new random variables
# -c --cleanup removes every RND assigned variable
# -x --export export to ansible .ini file_inventory file
